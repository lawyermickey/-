# 导入必要的库
import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.decomposition import PCA
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, cross_val_score
from sklearn.metrics import accuracy_score, classification_report

# 读取并合并数据
X1_train = pd.read_csv('X1_train.csv')
X2_train = pd.read_csv('X2_train.csv')
X3_train = pd.read_csv('X3_train.csv')
y_train = pd.read_csv('y_train.csv')
X1_test = pd.read_csv('X1_test.csv')
X2_test = pd.read_csv('X2_test.csv')
X3_test = pd.read_csv('X3_test.csv')

train = pd.merge(X1_train, X2_train, on='客户编号', how='inner')
train = pd.merge(train, X3_train, on='客户编号', how='inner')
train = pd.merge(train, y_train, on='客户编号', how='inner')

test = pd.merge(X1_test, X2_test, on='客户编号', how='inner')
test = pd.merge(test, X3_test, on='客户编号', how='inner')

# 数据预处理
# 分离非数值型特征
train_non_numeric = train.select_dtypes(exclude=np.number)
test_non_numeric = test.select_dtypes(exclude=np.number)
train_numeric = train.select_dtypes(include=np.number)
test_numeric = test.select_dtypes(include=np.number)

# 填补缺失值（只对数值型特征）
imputer = SimpleImputer(strategy='mean')
train_imputed = imputer.fit_transform(train_numeric)
test_imputed = imputer.transform(test_numeric)

# 重新合并非数值型特征和填补后的数值型特征
train_imputed = pd.DataFrame(train_imputed, columns=train_numeric.columns)
test_imputed = pd.DataFrame(test_imputed, columns=test_numeric.columns)
train_imputed = pd.concat([train_non_numeric, train_imputed], axis=1)
test_imputed = pd.concat([test_non_numeric, test_imputed], axis=1)

# 标准化数值特征
scaler = StandardScaler()
train_scaled = scaler.fit_transform(train_imputed)
test_scaled = scaler.transform(test_imputed)

# 对类别特征进行独热编码
encoder = OneHotEncoder()
train_encoded = encoder.fit_transform(train_scaled)
test_encoded = encoder.transform(test_scaled)

# 特征降维
pca = PCA(n_components=0.95)
train_pca = pca.fit_transform(train_encoded)
test_pca = pca.transform(test_encoded)

# 分离特征和标签
X_train = train_pca[:, :-1]
y_train = train_pca[:, -1]
X_test = test_pca

# 模型选择和调参
# 逻辑回归模型
lr = LogisticRegression()
lr_params = {'C': [0.01, 0.1, 1, 10], 'penalty': ['l1', 'l2']}
lr_grid = GridSearchCV(lr, lr_params, cv=5, scoring='accuracy')
lr_grid.fit(X_train, y_train)
print('Best parameters for logistic regression:', lr_grid.best_params_)
print('Best score for logistic regression:', lr_grid.best_score_)

# 决策树模型
dt = DecisionTreeClassifier()
dt_params = {'max_depth': [3, 5, 7, 9], 'min_samples_split': [2, 4, 6, 8]}
dt_grid = GridSearchCV(dt, dt_params, cv=5, scoring='accuracy')
dt_grid.fit(X_train, y_train)
print('Best parameters for decision tree:', dt_grid.best_params_)
print('Best score for decision tree:', dt_grid.best_score_)

# 随机森林模型
rf = RandomForestClassifier()
rf_params = {'n_estimators': [10, 50, 100, 200], 'max_features': ['auto', 'sqrt', 'log2']}
rf_grid = GridSearchCV(rf, rf_params, cv=5, scoring='accuracy')
rf_grid.fit(X_train, y_train)
print('Best parameters for random forest:', rf_grid.best_params_)
print('Best score for random forest:', rf_grid.best_score_)

# 支持向量机模型
svc = SVC()
svc_params = {'C': [0.01, 0.1, 1, 10], 'kernel': ['linear', 'rbf', 'poly', 'sigmoid']}
svc_grid = GridSearchCV(svc, svc_params, cv=5, scoring='accuracy')
svc_grid.fit(X_train, y_train)
print('Best parameters for support vector machine:', svc_grid.best_params_)
print('Best score for support vector machine:', svc_grid.best_score_)

# 模型评估和预测
# 选择最佳模型
best_model = rf_grid.best_estimator_
# 在训练集上评估模型
y_pred_train = best_model.predict(X_train)
train_accuracy = accuracy_score(y_train, y_pred_train)
train_report = classification_report(y_train, y_pred_train)
print('Train accuracy of the best model:', train_accuracy)
print('Train classification report of the best model:\n', train_report)

# 在测试集上预测结果
y_pred_test = best_model.predict(X_test)
# 将预测结果保存为csv文件
submission = pd.DataFrame({'客户编号': test['客户编号'], '复购频率': y_pred_test})
submission.to_csv('submission.csv', index=False)
